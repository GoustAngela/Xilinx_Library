// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module edge_canny_detector_xFFindmax3x3_3_0_0_s (
        ap_clk,
        ap_rst,
        p_i00,
        p_i01,
        p_i02,
        p_i10,
        p_i11,
        p_i12,
        p_i20,
        p_i21,
        p_i22,
        angle,
        p_low_threshold,
        p_high_threshold,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [15:0] p_i00;
input  [15:0] p_i01;
input  [15:0] p_i02;
input  [15:0] p_i10;
input  [15:0] p_i11;
input  [15:0] p_i12;
input  [15:0] p_i20;
input  [15:0] p_i21;
input  [15:0] p_i22;
input  [7:0] angle;
input  [7:0] p_low_threshold;
input  [7:0] p_high_threshold;
output  [7:0] ap_return;
input   ap_ce;

reg[7:0] ap_return;

wire   [0:0] icmp_ln886_fu_118_p2;
reg   [0:0] icmp_ln886_reg_477;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln870_fu_124_p2;
reg   [0:0] icmp_ln870_reg_485;
wire   [0:0] icmp_ln886_1_fu_130_p2;
reg   [0:0] icmp_ln886_1_reg_492;
wire   [0:0] icmp_ln882_fu_136_p2;
reg   [0:0] icmp_ln882_reg_498;
wire   [0:0] icmp_ln870_5_fu_142_p2;
reg   [0:0] icmp_ln870_5_reg_503;
wire   [0:0] icmp_ln886_2_fu_152_p2;
reg   [0:0] icmp_ln886_2_reg_510;
wire   [0:0] icmp_ln886_3_fu_158_p2;
reg   [0:0] icmp_ln886_3_reg_515;
wire   [0:0] icmp_ln886_4_fu_164_p2;
reg   [0:0] icmp_ln886_4_reg_521;
wire   [0:0] icmp_ln870_6_fu_170_p2;
reg   [0:0] icmp_ln870_6_reg_527;
wire   [0:0] icmp_ln886_5_fu_176_p2;
reg   [0:0] icmp_ln886_5_reg_534;
wire   [0:0] icmp_ln882_1_fu_182_p2;
reg   [0:0] icmp_ln882_1_reg_540;
wire   [0:0] icmp_ln870_7_fu_188_p2;
reg   [0:0] icmp_ln870_7_reg_545;
wire   [0:0] icmp_ln886_6_fu_194_p2;
reg   [0:0] icmp_ln886_6_reg_552;
wire   [0:0] icmp_ln886_7_fu_200_p2;
reg   [0:0] icmp_ln886_7_reg_557;
wire    ap_block_pp0_stage0;
wire   [15:0] zext_ln886_fu_114_p1;
wire   [15:0] zext_ln886_1_fu_148_p1;
wire   [0:0] xor_ln870_fu_223_p2;
wire   [0:0] and_ln870_fu_228_p2;
wire   [0:0] xor_ln870_1_fu_233_p2;
wire   [0:0] and_ln870_1_fu_238_p2;
wire   [0:0] xor_ln870_2_fu_244_p2;
wire   [0:0] and_ln870_2_fu_249_p2;
wire   [0:0] and_ln86_1_fu_260_p2;
wire   [0:0] and_ln86_fu_255_p2;
wire   [0:0] and_ln86_2_fu_264_p2;
wire   [7:0] NMS_fu_211_p3;
wire   [0:0] xor_ln882_1_fu_218_p2;
wire   [0:0] and_ln870_3_fu_278_p2;
wire   [0:0] and_ln73_fu_283_p2;
wire   [0:0] and_ln73_1_fu_289_p2;
wire   [7:0] NMS_1_fu_270_p3;
wire   [0:0] and_ln870_4_fu_302_p2;
wire   [0:0] and_ln59_fu_307_p2;
wire   [0:0] and_ln59_1_fu_312_p2;
wire   [7:0] NMS_2_fu_294_p3;
wire   [0:0] xor_ln882_fu_206_p2;
wire   [0:0] and_ln870_5_fu_325_p2;
wire   [0:0] and_ln46_fu_329_p2;
wire   [0:0] and_ln46_1_fu_335_p2;
wire   [7:0] NMS_3_fu_317_p3;
wire   [7:0] NMS_4_fu_340_p3;
wire   [0:0] and_ln46_2_fu_355_p2;
wire   [0:0] xor_ln46_fu_360_p2;
wire   [0:0] and_ln59_2_fu_372_p2;
wire   [0:0] xor_ln59_fu_376_p2;
wire   [0:0] and_ln59_3_fu_382_p2;
wire   [0:0] and_ln46_3_fu_366_p2;
wire   [0:0] or_ln59_fu_388_p2;
wire   [7:0] NMS_5_fu_348_p3;
wire   [0:0] and_ln73_2_fu_402_p2;
wire   [0:0] xor_ln73_fu_407_p2;
wire   [0:0] xor_ln870_3_fu_419_p2;
wire   [0:0] xor_ln870_4_fu_430_p2;
wire   [0:0] or_ln870_1_fu_435_p2;
wire   [0:0] or_ln870_2_fu_440_p2;
wire   [0:0] or_ln870_3_fu_445_p2;
wire   [0:0] or_ln870_4_fu_450_p2;
wire   [0:0] and_ln870_6_fu_424_p2;
wire   [0:0] and_ln73_3_fu_413_p2;
wire   [0:0] or_ln870_fu_463_p2;
wire   [7:0] select_ln870_fu_455_p3;
wire   [7:0] NMS_6_fu_394_p3;
wire   [7:0] NMS_7_fu_469_p3;
reg    ap_ce_reg;
reg   [7:0] ap_return_int_reg;

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg <= NMS_7_fu_469_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln870_5_reg_503 <= icmp_ln870_5_fu_142_p2;
        icmp_ln870_6_reg_527 <= icmp_ln870_6_fu_170_p2;
        icmp_ln870_7_reg_545 <= icmp_ln870_7_fu_188_p2;
        icmp_ln870_reg_485 <= icmp_ln870_fu_124_p2;
        icmp_ln882_1_reg_540 <= icmp_ln882_1_fu_182_p2;
        icmp_ln882_reg_498 <= icmp_ln882_fu_136_p2;
        icmp_ln886_1_reg_492 <= icmp_ln886_1_fu_130_p2;
        icmp_ln886_2_reg_510 <= icmp_ln886_2_fu_152_p2;
        icmp_ln886_3_reg_515 <= icmp_ln886_3_fu_158_p2;
        icmp_ln886_4_reg_521 <= icmp_ln886_4_fu_164_p2;
        icmp_ln886_5_reg_534 <= icmp_ln886_5_fu_176_p2;
        icmp_ln886_6_reg_552 <= icmp_ln886_6_fu_194_p2;
        icmp_ln886_7_reg_557 <= icmp_ln886_7_fu_200_p2;
        icmp_ln886_reg_477 <= icmp_ln886_fu_118_p2;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = NMS_7_fu_469_p3;
    end
end

assign NMS_1_fu_270_p3 = ((and_ln86_2_fu_264_p2[0:0] == 1'b1) ? NMS_fu_211_p3 : 8'd255);

assign NMS_2_fu_294_p3 = ((and_ln73_1_fu_289_p2[0:0] == 1'b1) ? NMS_fu_211_p3 : NMS_1_fu_270_p3);

assign NMS_3_fu_317_p3 = ((and_ln59_1_fu_312_p2[0:0] == 1'b1) ? NMS_fu_211_p3 : NMS_2_fu_294_p3);

assign NMS_4_fu_340_p3 = ((and_ln46_1_fu_335_p2[0:0] == 1'b1) ? NMS_fu_211_p3 : NMS_3_fu_317_p3);

assign NMS_5_fu_348_p3 = ((icmp_ln886_reg_477[0:0] == 1'b1) ? NMS_4_fu_340_p3 : 8'd255);

assign NMS_6_fu_394_p3 = ((or_ln59_fu_388_p2[0:0] == 1'b1) ? 8'd255 : NMS_5_fu_348_p3);

assign NMS_7_fu_469_p3 = ((or_ln870_fu_463_p2[0:0] == 1'b1) ? select_ln870_fu_455_p3 : NMS_6_fu_394_p3);

assign NMS_fu_211_p3 = ((icmp_ln886_2_reg_510[0:0] == 1'b1) ? 8'd0 : 8'd128);

assign and_ln46_1_fu_335_p2 = (icmp_ln886_1_reg_492 & and_ln46_fu_329_p2);

assign and_ln46_2_fu_355_p2 = (xor_ln882_fu_206_p2 & icmp_ln886_1_reg_492);

assign and_ln46_3_fu_366_p2 = (xor_ln46_fu_360_p2 & and_ln870_5_fu_325_p2);

assign and_ln46_fu_329_p2 = (xor_ln882_fu_206_p2 & and_ln870_5_fu_325_p2);

assign and_ln59_1_fu_312_p2 = (icmp_ln886_3_reg_515 & and_ln59_fu_307_p2);

assign and_ln59_2_fu_372_p2 = (icmp_ln886_4_reg_521 & icmp_ln886_3_reg_515);

assign and_ln59_3_fu_382_p2 = (xor_ln59_fu_376_p2 & and_ln870_4_fu_302_p2);

assign and_ln59_fu_307_p2 = (icmp_ln886_4_reg_521 & and_ln870_4_fu_302_p2);

assign and_ln73_1_fu_289_p2 = (icmp_ln886_5_reg_534 & and_ln73_fu_283_p2);

assign and_ln73_2_fu_402_p2 = (xor_ln882_1_fu_218_p2 & icmp_ln886_5_reg_534);

assign and_ln73_3_fu_413_p2 = (xor_ln73_fu_407_p2 & and_ln870_3_fu_278_p2);

assign and_ln73_fu_283_p2 = (xor_ln882_1_fu_218_p2 & and_ln870_3_fu_278_p2);

assign and_ln86_1_fu_260_p2 = (icmp_ln886_7_reg_557 & icmp_ln886_6_reg_552);

assign and_ln86_2_fu_264_p2 = (and_ln86_fu_255_p2 & and_ln86_1_fu_260_p2);

assign and_ln86_fu_255_p2 = (icmp_ln870_7_reg_545 & and_ln870_2_fu_249_p2);

assign and_ln870_1_fu_238_p2 = (xor_ln870_1_fu_233_p2 & and_ln870_fu_228_p2);

assign and_ln870_2_fu_249_p2 = (xor_ln870_2_fu_244_p2 & and_ln870_1_fu_238_p2);

assign and_ln870_3_fu_278_p2 = (icmp_ln870_6_reg_527 & and_ln870_1_fu_238_p2);

assign and_ln870_4_fu_302_p2 = (icmp_ln870_5_reg_503 & and_ln870_fu_228_p2);

assign and_ln870_5_fu_325_p2 = (icmp_ln886_reg_477 & icmp_ln870_reg_485);

assign and_ln870_6_fu_424_p2 = (xor_ln870_3_fu_419_p2 & and_ln870_2_fu_249_p2);

assign and_ln870_fu_228_p2 = (xor_ln870_fu_223_p2 & icmp_ln886_reg_477);

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign icmp_ln870_5_fu_142_p2 = ((angle == 8'd45) ? 1'b1 : 1'b0);

assign icmp_ln870_6_fu_170_p2 = ((angle == 8'd90) ? 1'b1 : 1'b0);

assign icmp_ln870_7_fu_188_p2 = ((angle == 8'd135) ? 1'b1 : 1'b0);

assign icmp_ln870_fu_124_p2 = ((angle == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln882_1_fu_182_p2 = (($signed(p_i11) < $signed(p_i21)) ? 1'b1 : 1'b0);

assign icmp_ln882_fu_136_p2 = (($signed(p_i11) < $signed(p_i12)) ? 1'b1 : 1'b0);

assign icmp_ln886_1_fu_130_p2 = (($signed(p_i11) > $signed(p_i10)) ? 1'b1 : 1'b0);

assign icmp_ln886_2_fu_152_p2 = (($signed(zext_ln886_1_fu_148_p1) < $signed(p_i11)) ? 1'b1 : 1'b0);

assign icmp_ln886_3_fu_158_p2 = (($signed(p_i11) > $signed(p_i02)) ? 1'b1 : 1'b0);

assign icmp_ln886_4_fu_164_p2 = (($signed(p_i11) > $signed(p_i20)) ? 1'b1 : 1'b0);

assign icmp_ln886_5_fu_176_p2 = (($signed(p_i11) > $signed(p_i01)) ? 1'b1 : 1'b0);

assign icmp_ln886_6_fu_194_p2 = (($signed(p_i11) > $signed(p_i00)) ? 1'b1 : 1'b0);

assign icmp_ln886_7_fu_200_p2 = (($signed(p_i11) > $signed(p_i22)) ? 1'b1 : 1'b0);

assign icmp_ln886_fu_118_p2 = (($signed(zext_ln886_fu_114_p1) < $signed(p_i11)) ? 1'b1 : 1'b0);

assign or_ln59_fu_388_p2 = (and_ln59_3_fu_382_p2 | and_ln46_3_fu_366_p2);

assign or_ln870_1_fu_435_p2 = (xor_ln870_4_fu_430_p2 | icmp_ln870_reg_485);

assign or_ln870_2_fu_440_p2 = (or_ln870_1_fu_435_p2 | icmp_ln870_5_reg_503);

assign or_ln870_3_fu_445_p2 = (or_ln870_2_fu_440_p2 | icmp_ln870_6_reg_527);

assign or_ln870_4_fu_450_p2 = (or_ln870_3_fu_445_p2 | icmp_ln870_7_reg_545);

assign or_ln870_fu_463_p2 = (and_ln870_6_fu_424_p2 | and_ln73_3_fu_413_p2);

assign select_ln870_fu_455_p3 = ((or_ln870_4_fu_450_p2[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign xor_ln46_fu_360_p2 = (1'd1 ^ and_ln46_2_fu_355_p2);

assign xor_ln59_fu_376_p2 = (1'd1 ^ and_ln59_2_fu_372_p2);

assign xor_ln73_fu_407_p2 = (1'd1 ^ and_ln73_2_fu_402_p2);

assign xor_ln870_1_fu_233_p2 = (icmp_ln870_5_reg_503 ^ 1'd1);

assign xor_ln870_2_fu_244_p2 = (icmp_ln870_6_reg_527 ^ 1'd1);

assign xor_ln870_3_fu_419_p2 = (icmp_ln870_7_reg_545 ^ 1'd1);

assign xor_ln870_4_fu_430_p2 = (icmp_ln886_reg_477 ^ 1'd1);

assign xor_ln870_fu_223_p2 = (icmp_ln870_reg_485 ^ 1'd1);

assign xor_ln882_1_fu_218_p2 = (icmp_ln882_1_reg_540 ^ 1'd1);

assign xor_ln882_fu_206_p2 = (icmp_ln882_reg_498 ^ 1'd1);

assign zext_ln886_1_fu_148_p1 = p_high_threshold;

assign zext_ln886_fu_114_p1 = p_low_threshold;

endmodule //edge_canny_detector_xFFindmax3x3_3_0_0_s
