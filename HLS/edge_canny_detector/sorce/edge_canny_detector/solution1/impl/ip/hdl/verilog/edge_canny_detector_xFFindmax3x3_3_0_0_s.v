// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module edge_canny_detector_xFFindmax3x3_3_0_0_s (
        ap_ready,
        p_i00,
        p_i01,
        p_i02,
        p_i10,
        p_i11,
        p_i12,
        p_i20,
        p_i21,
        p_i22,
        angle,
        p_low_threshold,
        p_high_threshold,
        ap_return
);


output   ap_ready;
input  [15:0] p_i00;
input  [15:0] p_i01;
input  [15:0] p_i02;
input  [15:0] p_i10;
input  [15:0] p_i11;
input  [15:0] p_i12;
input  [15:0] p_i20;
input  [15:0] p_i21;
input  [15:0] p_i22;
input  [7:0] angle;
input  [7:0] p_low_threshold;
input  [7:0] p_high_threshold;
output  [7:0] ap_return;

wire   [15:0] zext_ln886_fu_114_p1;
wire   [0:0] icmp_ln882_fu_136_p2;
wire   [15:0] zext_ln886_1_fu_154_p1;
wire   [0:0] icmp_ln886_2_fu_158_p2;
wire   [0:0] icmp_ln882_1_fu_196_p2;
wire   [0:0] icmp_ln870_fu_124_p2;
wire   [0:0] icmp_ln886_fu_118_p2;
wire   [0:0] xor_ln870_fu_226_p2;
wire   [0:0] icmp_ln870_5_fu_148_p2;
wire   [0:0] and_ln870_fu_232_p2;
wire   [0:0] xor_ln870_1_fu_238_p2;
wire   [0:0] icmp_ln870_6_fu_184_p2;
wire   [0:0] and_ln870_1_fu_244_p2;
wire   [0:0] xor_ln870_2_fu_250_p2;
wire   [0:0] and_ln870_2_fu_256_p2;
wire   [0:0] icmp_ln870_7_fu_208_p2;
wire   [0:0] icmp_ln886_7_fu_220_p2;
wire   [0:0] icmp_ln886_6_fu_214_p2;
wire   [0:0] and_ln86_1_fu_268_p2;
wire   [0:0] and_ln86_fu_262_p2;
wire   [0:0] and_ln86_2_fu_274_p2;
wire   [7:0] NMS_fu_164_p3;
wire   [0:0] xor_ln882_1_fu_202_p2;
wire   [0:0] and_ln870_3_fu_288_p2;
wire   [0:0] and_ln73_fu_294_p2;
wire   [0:0] icmp_ln886_5_fu_190_p2;
wire   [0:0] and_ln73_1_fu_300_p2;
wire   [7:0] NMS_1_fu_280_p3;
wire   [0:0] icmp_ln886_4_fu_178_p2;
wire   [0:0] and_ln870_4_fu_314_p2;
wire   [0:0] and_ln59_fu_320_p2;
wire   [0:0] icmp_ln886_3_fu_172_p2;
wire   [0:0] and_ln59_1_fu_326_p2;
wire   [7:0] NMS_2_fu_306_p3;
wire   [0:0] xor_ln882_fu_142_p2;
wire   [0:0] and_ln870_5_fu_340_p2;
wire   [0:0] and_ln46_fu_346_p2;
wire   [0:0] icmp_ln886_1_fu_130_p2;
wire   [0:0] and_ln46_1_fu_352_p2;
wire   [7:0] NMS_3_fu_332_p3;
wire   [7:0] NMS_4_fu_358_p3;
wire   [0:0] and_ln46_2_fu_374_p2;
wire   [0:0] xor_ln46_fu_380_p2;
wire   [0:0] and_ln59_2_fu_392_p2;
wire   [0:0] xor_ln59_fu_398_p2;
wire   [0:0] and_ln59_3_fu_404_p2;
wire   [0:0] and_ln46_3_fu_386_p2;
wire   [0:0] or_ln59_fu_410_p2;
wire   [7:0] NMS_5_fu_366_p3;
wire   [0:0] and_ln73_2_fu_424_p2;
wire   [0:0] xor_ln73_fu_430_p2;
wire   [0:0] xor_ln870_3_fu_442_p2;
wire   [0:0] xor_ln870_4_fu_454_p2;
wire   [0:0] or_ln870_1_fu_460_p2;
wire   [0:0] or_ln870_2_fu_466_p2;
wire   [0:0] or_ln870_3_fu_472_p2;
wire   [0:0] or_ln870_4_fu_478_p2;
wire   [0:0] and_ln870_6_fu_448_p2;
wire   [0:0] and_ln73_3_fu_436_p2;
wire   [0:0] or_ln870_fu_492_p2;
wire   [7:0] select_ln870_fu_484_p3;
wire   [7:0] NMS_6_fu_416_p3;
wire    ap_ce_reg;

assign NMS_1_fu_280_p3 = ((and_ln86_2_fu_274_p2[0:0] == 1'b1) ? NMS_fu_164_p3 : 8'd255);

assign NMS_2_fu_306_p3 = ((and_ln73_1_fu_300_p2[0:0] == 1'b1) ? NMS_fu_164_p3 : NMS_1_fu_280_p3);

assign NMS_3_fu_332_p3 = ((and_ln59_1_fu_326_p2[0:0] == 1'b1) ? NMS_fu_164_p3 : NMS_2_fu_306_p3);

assign NMS_4_fu_358_p3 = ((and_ln46_1_fu_352_p2[0:0] == 1'b1) ? NMS_fu_164_p3 : NMS_3_fu_332_p3);

assign NMS_5_fu_366_p3 = ((icmp_ln886_fu_118_p2[0:0] == 1'b1) ? NMS_4_fu_358_p3 : 8'd255);

assign NMS_6_fu_416_p3 = ((or_ln59_fu_410_p2[0:0] == 1'b1) ? 8'd255 : NMS_5_fu_366_p3);

assign NMS_fu_164_p3 = ((icmp_ln886_2_fu_158_p2[0:0] == 1'b1) ? 8'd0 : 8'd128);

assign and_ln46_1_fu_352_p2 = (icmp_ln886_1_fu_130_p2 & and_ln46_fu_346_p2);

assign and_ln46_2_fu_374_p2 = (xor_ln882_fu_142_p2 & icmp_ln886_1_fu_130_p2);

assign and_ln46_3_fu_386_p2 = (xor_ln46_fu_380_p2 & and_ln870_5_fu_340_p2);

assign and_ln46_fu_346_p2 = (xor_ln882_fu_142_p2 & and_ln870_5_fu_340_p2);

assign and_ln59_1_fu_326_p2 = (icmp_ln886_3_fu_172_p2 & and_ln59_fu_320_p2);

assign and_ln59_2_fu_392_p2 = (icmp_ln886_4_fu_178_p2 & icmp_ln886_3_fu_172_p2);

assign and_ln59_3_fu_404_p2 = (xor_ln59_fu_398_p2 & and_ln870_4_fu_314_p2);

assign and_ln59_fu_320_p2 = (icmp_ln886_4_fu_178_p2 & and_ln870_4_fu_314_p2);

assign and_ln73_1_fu_300_p2 = (icmp_ln886_5_fu_190_p2 & and_ln73_fu_294_p2);

assign and_ln73_2_fu_424_p2 = (xor_ln882_1_fu_202_p2 & icmp_ln886_5_fu_190_p2);

assign and_ln73_3_fu_436_p2 = (xor_ln73_fu_430_p2 & and_ln870_3_fu_288_p2);

assign and_ln73_fu_294_p2 = (xor_ln882_1_fu_202_p2 & and_ln870_3_fu_288_p2);

assign and_ln86_1_fu_268_p2 = (icmp_ln886_7_fu_220_p2 & icmp_ln886_6_fu_214_p2);

assign and_ln86_2_fu_274_p2 = (and_ln86_fu_262_p2 & and_ln86_1_fu_268_p2);

assign and_ln86_fu_262_p2 = (icmp_ln870_7_fu_208_p2 & and_ln870_2_fu_256_p2);

assign and_ln870_1_fu_244_p2 = (xor_ln870_1_fu_238_p2 & and_ln870_fu_232_p2);

assign and_ln870_2_fu_256_p2 = (xor_ln870_2_fu_250_p2 & and_ln870_1_fu_244_p2);

assign and_ln870_3_fu_288_p2 = (icmp_ln870_6_fu_184_p2 & and_ln870_1_fu_244_p2);

assign and_ln870_4_fu_314_p2 = (icmp_ln870_5_fu_148_p2 & and_ln870_fu_232_p2);

assign and_ln870_5_fu_340_p2 = (icmp_ln886_fu_118_p2 & icmp_ln870_fu_124_p2);

assign and_ln870_6_fu_448_p2 = (xor_ln870_3_fu_442_p2 & and_ln870_2_fu_256_p2);

assign and_ln870_fu_232_p2 = (xor_ln870_fu_226_p2 & icmp_ln886_fu_118_p2);

assign ap_ready = 1'b1;

assign ap_return = ((or_ln870_fu_492_p2[0:0] == 1'b1) ? select_ln870_fu_484_p3 : NMS_6_fu_416_p3);

assign icmp_ln870_5_fu_148_p2 = ((angle == 8'd45) ? 1'b1 : 1'b0);

assign icmp_ln870_6_fu_184_p2 = ((angle == 8'd90) ? 1'b1 : 1'b0);

assign icmp_ln870_7_fu_208_p2 = ((angle == 8'd135) ? 1'b1 : 1'b0);

assign icmp_ln870_fu_124_p2 = ((angle == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln882_1_fu_196_p2 = (($signed(p_i11) < $signed(p_i21)) ? 1'b1 : 1'b0);

assign icmp_ln882_fu_136_p2 = (($signed(p_i11) < $signed(p_i12)) ? 1'b1 : 1'b0);

assign icmp_ln886_1_fu_130_p2 = (($signed(p_i11) > $signed(p_i10)) ? 1'b1 : 1'b0);

assign icmp_ln886_2_fu_158_p2 = (($signed(zext_ln886_1_fu_154_p1) < $signed(p_i11)) ? 1'b1 : 1'b0);

assign icmp_ln886_3_fu_172_p2 = (($signed(p_i11) > $signed(p_i02)) ? 1'b1 : 1'b0);

assign icmp_ln886_4_fu_178_p2 = (($signed(p_i11) > $signed(p_i20)) ? 1'b1 : 1'b0);

assign icmp_ln886_5_fu_190_p2 = (($signed(p_i11) > $signed(p_i01)) ? 1'b1 : 1'b0);

assign icmp_ln886_6_fu_214_p2 = (($signed(p_i11) > $signed(p_i00)) ? 1'b1 : 1'b0);

assign icmp_ln886_7_fu_220_p2 = (($signed(p_i11) > $signed(p_i22)) ? 1'b1 : 1'b0);

assign icmp_ln886_fu_118_p2 = (($signed(zext_ln886_fu_114_p1) < $signed(p_i11)) ? 1'b1 : 1'b0);

assign or_ln59_fu_410_p2 = (and_ln59_3_fu_404_p2 | and_ln46_3_fu_386_p2);

assign or_ln870_1_fu_460_p2 = (xor_ln870_4_fu_454_p2 | icmp_ln870_fu_124_p2);

assign or_ln870_2_fu_466_p2 = (or_ln870_1_fu_460_p2 | icmp_ln870_5_fu_148_p2);

assign or_ln870_3_fu_472_p2 = (or_ln870_2_fu_466_p2 | icmp_ln870_6_fu_184_p2);

assign or_ln870_4_fu_478_p2 = (or_ln870_3_fu_472_p2 | icmp_ln870_7_fu_208_p2);

assign or_ln870_fu_492_p2 = (and_ln870_6_fu_448_p2 | and_ln73_3_fu_436_p2);

assign select_ln870_fu_484_p3 = ((or_ln870_4_fu_478_p2[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign xor_ln46_fu_380_p2 = (1'd1 ^ and_ln46_2_fu_374_p2);

assign xor_ln59_fu_398_p2 = (1'd1 ^ and_ln59_2_fu_392_p2);

assign xor_ln73_fu_430_p2 = (1'd1 ^ and_ln73_2_fu_424_p2);

assign xor_ln870_1_fu_238_p2 = (icmp_ln870_5_fu_148_p2 ^ 1'd1);

assign xor_ln870_2_fu_250_p2 = (icmp_ln870_6_fu_184_p2 ^ 1'd1);

assign xor_ln870_3_fu_442_p2 = (icmp_ln870_7_fu_208_p2 ^ 1'd1);

assign xor_ln870_4_fu_454_p2 = (icmp_ln886_fu_118_p2 ^ 1'd1);

assign xor_ln870_fu_226_p2 = (icmp_ln870_fu_124_p2 ^ 1'd1);

assign xor_ln882_1_fu_202_p2 = (icmp_ln882_1_fu_196_p2 ^ 1'd1);

assign xor_ln882_fu_142_p2 = (icmp_ln882_fu_136_p2 ^ 1'd1);

assign zext_ln886_1_fu_154_p1 = p_high_threshold;

assign zext_ln886_fu_114_p1 = p_low_threshold;

endmodule //edge_canny_detector_xFFindmax3x3_3_0_0_s
