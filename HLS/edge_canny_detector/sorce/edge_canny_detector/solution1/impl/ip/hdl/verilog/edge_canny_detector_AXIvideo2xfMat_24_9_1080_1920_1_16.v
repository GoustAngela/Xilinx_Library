// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module edge_canny_detector_AXIvideo2xfMat_24_9_1080_1920_1_16 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        rgb_img_src_4206_din,
        rgb_img_src_4206_full_n,
        rgb_img_src_4206_write,
        src_TDATA,
        src_TVALID,
        src_TREADY,
        src_TKEEP,
        src_TSTRB,
        src_TUSER,
        src_TLAST,
        src_TID,
        src_TDEST,
        lowthreshold,
        lowthreshold_ap_vld,
        highthreshold,
        highthreshold_ap_vld,
        lowthreshold_out_din,
        lowthreshold_out_full_n,
        lowthreshold_out_write,
        highthreshold_out_din,
        highthreshold_out_full_n,
        highthreshold_out_write
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_pp1_stage0 = 8'd16;
parameter    ap_ST_fsm_state7 = 8'd32;
parameter    ap_ST_fsm_state8 = 8'd64;
parameter    ap_ST_fsm_state9 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output  [23:0] rgb_img_src_4206_din;
input   rgb_img_src_4206_full_n;
output   rgb_img_src_4206_write;
input  [23:0] src_TDATA;
input   src_TVALID;
output   src_TREADY;
input  [2:0] src_TKEEP;
input  [2:0] src_TSTRB;
input  [0:0] src_TUSER;
input  [0:0] src_TLAST;
input  [0:0] src_TID;
input  [0:0] src_TDEST;
input  [7:0] lowthreshold;
input   lowthreshold_ap_vld;
input  [7:0] highthreshold;
input   highthreshold_ap_vld;
output  [7:0] lowthreshold_out_din;
input   lowthreshold_out_full_n;
output   lowthreshold_out_write;
output  [7:0] highthreshold_out_din;
input   highthreshold_out_full_n;
output   highthreshold_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg rgb_img_src_4206_write;
reg lowthreshold_out_write;
reg highthreshold_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    rgb_img_src_4206_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln132_reg_408;
reg    src_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] ap_phi_mux_start_phi_fu_175_p4;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] icmp_ln132_fu_372_p2;
wire   [0:0] or_ln138_fu_378_p2;
wire    ap_CS_fsm_state8;
wire   [0:0] ap_phi_mux_axi_last_V_9_phi_fu_315_p4;
reg    lowthreshold_blk_n;
reg    highthreshold_blk_n;
reg    lowthreshold_out_blk_n;
reg    highthreshold_out_blk_n;
reg   [10:0] j_reg_231;
reg   [0:0] last_reg_242;
reg   [0:0] start_3_reg_254;
reg   [23:0] axi_data_V_3_reg_265;
reg   [0:0] axi_last_V_3_reg_276;
reg   [0:0] axi_last_V_8_reg_286;
reg   [23:0] p_Val2_s_reg_299;
reg    ap_block_state2;
reg    ap_block_state8;
wire   [10:0] i_3_fu_354_p2;
reg   [10:0] i_3_reg_394;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln128_fu_360_p2;
wire   [10:0] j_3_fu_366_p2;
reg    ap_predicate_op122_read_state5;
reg    ap_block_state5_pp1_stage0_iter0;
reg    ap_block_state6_pp1_stage0_iter1;
reg    ap_block_pp1_stage0_11001;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state5;
reg   [0:0] axi_last_V_reg_147;
reg   [23:0] axi_data_V_reg_159;
reg   [0:0] start_reg_171;
reg    ap_block_state1;
reg   [10:0] i_reg_182;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state3;
reg   [0:0] start_2_reg_193;
reg   [23:0] axi_data_V_4_reg_322;
reg   [23:0] axi_data_V_2_reg_207;
reg   [0:0] axi_last_V_2_reg_218;
reg   [0:0] ap_phi_mux_last_phi_fu_246_p4;
reg   [0:0] ap_phi_mux_start_3_phi_fu_257_p4;
reg   [23:0] ap_phi_mux_axi_data_V_3_phi_fu_268_p4;
reg   [0:0] ap_phi_mux_axi_last_V_3_phi_fu_279_p4;
wire   [0:0] ap_phi_reg_pp1_iter0_axi_last_V_8_reg_286;
wire   [23:0] ap_phi_reg_pp1_iter0_p_Val2_s_reg_299;
reg   [0:0] axi_last_V_9_reg_312;
wire    ap_CS_fsm_state7;
reg    ap_block_pp1_stage0_01001;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    regslice_both_AXI_video_strm_V_data_V_U_apdone_blk;
wire   [23:0] src_TDATA_int_regslice;
wire    src_TVALID_int_regslice;
reg    src_TREADY_int_regslice;
wire    regslice_both_AXI_video_strm_V_data_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_keep_V_U_apdone_blk;
wire   [2:0] src_TKEEP_int_regslice;
wire    regslice_both_AXI_video_strm_V_keep_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_keep_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_strb_V_U_apdone_blk;
wire   [2:0] src_TSTRB_int_regslice;
wire    regslice_both_AXI_video_strm_V_strb_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_strb_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_user_V_U_apdone_blk;
wire   [0:0] src_TUSER_int_regslice;
wire    regslice_both_AXI_video_strm_V_user_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_user_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_last_V_U_apdone_blk;
wire   [0:0] src_TLAST_int_regslice;
wire    regslice_both_AXI_video_strm_V_last_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_last_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_id_V_U_apdone_blk;
wire   [0:0] src_TID_int_regslice;
wire    regslice_both_AXI_video_strm_V_id_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_id_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_dest_V_U_apdone_blk;
wire   [0:0] src_TDEST_int_regslice;
wire    regslice_both_AXI_video_strm_V_dest_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_dest_V_U_ack_in;
reg    ap_condition_180;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
end

edge_canny_detector_regslice_both #(
    .DataWidth( 24 ))
regslice_both_AXI_video_strm_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(src_TDATA),
    .vld_in(src_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_data_V_U_ack_in),
    .data_out(src_TDATA_int_regslice),
    .vld_out(src_TVALID_int_regslice),
    .ack_out(src_TREADY_int_regslice),
    .apdone_blk(regslice_both_AXI_video_strm_V_data_V_U_apdone_blk)
);

edge_canny_detector_regslice_both #(
    .DataWidth( 3 ))
regslice_both_AXI_video_strm_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(src_TKEEP),
    .vld_in(src_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_keep_V_U_ack_in),
    .data_out(src_TKEEP_int_regslice),
    .vld_out(regslice_both_AXI_video_strm_V_keep_V_U_vld_out),
    .ack_out(src_TREADY_int_regslice),
    .apdone_blk(regslice_both_AXI_video_strm_V_keep_V_U_apdone_blk)
);

edge_canny_detector_regslice_both #(
    .DataWidth( 3 ))
regslice_both_AXI_video_strm_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(src_TSTRB),
    .vld_in(src_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_strb_V_U_ack_in),
    .data_out(src_TSTRB_int_regslice),
    .vld_out(regslice_both_AXI_video_strm_V_strb_V_U_vld_out),
    .ack_out(src_TREADY_int_regslice),
    .apdone_blk(regslice_both_AXI_video_strm_V_strb_V_U_apdone_blk)
);

edge_canny_detector_regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(src_TUSER),
    .vld_in(src_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_user_V_U_ack_in),
    .data_out(src_TUSER_int_regslice),
    .vld_out(regslice_both_AXI_video_strm_V_user_V_U_vld_out),
    .ack_out(src_TREADY_int_regslice),
    .apdone_blk(regslice_both_AXI_video_strm_V_user_V_U_apdone_blk)
);

edge_canny_detector_regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(src_TLAST),
    .vld_in(src_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_last_V_U_ack_in),
    .data_out(src_TLAST_int_regslice),
    .vld_out(regslice_both_AXI_video_strm_V_last_V_U_vld_out),
    .ack_out(src_TREADY_int_regslice),
    .apdone_blk(regslice_both_AXI_video_strm_V_last_V_U_apdone_blk)
);

edge_canny_detector_regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(src_TID),
    .vld_in(src_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_id_V_U_ack_in),
    .data_out(src_TID_int_regslice),
    .vld_out(regslice_both_AXI_video_strm_V_id_V_U_vld_out),
    .ack_out(src_TREADY_int_regslice),
    .apdone_blk(regslice_both_AXI_video_strm_V_id_V_U_apdone_blk)
);

edge_canny_detector_regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(src_TDEST),
    .vld_in(src_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_dest_V_U_ack_in),
    .data_out(src_TDEST_int_regslice),
    .vld_out(regslice_both_AXI_video_strm_V_dest_V_U_vld_out),
    .ack_out(src_TREADY_int_regslice),
    .apdone_blk(regslice_both_AXI_video_strm_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_360_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state5))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_360_p2 == 1'd0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state5))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state5);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_360_p2 == 1'd0))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        axi_data_V_2_reg_207 <= axi_data_V_reg_159;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        axi_data_V_2_reg_207 <= axi_data_V_4_reg_322;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_360_p2 == 1'd0))) begin
        axi_data_V_3_reg_265 <= axi_data_V_2_reg_207;
    end else if (((icmp_ln132_reg_408 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        axi_data_V_3_reg_265 <= p_Val2_s_reg_299;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        axi_data_V_4_reg_322 <= axi_data_V_3_reg_265;
    end else if ((~((src_TVALID_int_regslice == 1'b0) & (axi_last_V_9_reg_312 == 1'd0)) & (1'b1 == ap_CS_fsm_state8) & (axi_last_V_9_reg_312 == 1'd0))) begin
        axi_data_V_4_reg_322 <= src_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        axi_last_V_2_reg_218 <= axi_last_V_reg_147;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        axi_last_V_2_reg_218 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_360_p2 == 1'd0))) begin
        axi_last_V_3_reg_276 <= axi_last_V_2_reg_218;
    end else if (((icmp_ln132_reg_408 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        axi_last_V_3_reg_276 <= axi_last_V_8_reg_286;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_180)) begin
        if (((or_ln138_fu_378_p2 == 1'd1) & (icmp_ln132_fu_372_p2 == 1'd0))) begin
            axi_last_V_8_reg_286 <= ap_phi_mux_axi_last_V_3_phi_fu_279_p4;
        end else if (((or_ln138_fu_378_p2 == 1'd0) & (icmp_ln132_fu_372_p2 == 1'd0))) begin
            axi_last_V_8_reg_286 <= src_TLAST_int_regslice;
        end else if ((1'b1 == 1'b1)) begin
            axi_last_V_8_reg_286 <= ap_phi_reg_pp1_iter0_axi_last_V_8_reg_286;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        axi_last_V_9_reg_312 <= last_reg_242;
    end else if ((~((src_TVALID_int_regslice == 1'b0) & (axi_last_V_9_reg_312 == 1'd0)) & (1'b1 == ap_CS_fsm_state8) & (axi_last_V_9_reg_312 == 1'd0))) begin
        axi_last_V_9_reg_312 <= src_TLAST_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_182 <= 11'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        i_reg_182 <= i_3_reg_394;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_360_p2 == 1'd0))) begin
        j_reg_231 <= 11'd0;
    end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln132_fu_372_p2 == 1'd0))) begin
        j_reg_231 <= j_3_fu_366_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_360_p2 == 1'd0))) begin
        last_reg_242 <= 1'd0;
    end else if (((icmp_ln132_reg_408 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        last_reg_242 <= axi_last_V_8_reg_286;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_180)) begin
        if (((or_ln138_fu_378_p2 == 1'd1) & (icmp_ln132_fu_372_p2 == 1'd0))) begin
            p_Val2_s_reg_299 <= ap_phi_mux_axi_data_V_3_phi_fu_268_p4;
        end else if (((or_ln138_fu_378_p2 == 1'd0) & (icmp_ln132_fu_372_p2 == 1'd0))) begin
            p_Val2_s_reg_299 <= src_TDATA_int_regslice;
        end else if ((1'b1 == 1'b1)) begin
            p_Val2_s_reg_299 <= ap_phi_reg_pp1_iter0_p_Val2_s_reg_299;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        start_2_reg_193 <= 1'd1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        start_2_reg_193 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_360_p2 == 1'd0))) begin
        start_3_reg_254 <= start_2_reg_193;
    end else if (((icmp_ln132_reg_408 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        start_3_reg_254 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((highthreshold_out_full_n == 1'b0) | (lowthreshold_out_full_n == 1'b0) | (highthreshold_ap_vld == 1'b0) | (lowthreshold_ap_vld == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        start_reg_171 <= 1'd0;
    end else if ((~((start_reg_171 == 1'd0) & (src_TVALID_int_regslice == 1'b0)) & (start_reg_171 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        start_reg_171 <= src_TUSER_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((~((start_reg_171 == 1'd0) & (src_TVALID_int_regslice == 1'b0)) & (start_reg_171 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        axi_data_V_reg_159 <= src_TDATA_int_regslice;
        axi_last_V_reg_147 <= src_TLAST_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_3_reg_394 <= i_3_fu_354_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln132_reg_408 <= icmp_ln132_fu_372_p2;
    end
end

always @ (*) begin
    if ((icmp_ln132_fu_372_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_360_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln132_reg_408 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_axi_data_V_3_phi_fu_268_p4 = p_Val2_s_reg_299;
    end else begin
        ap_phi_mux_axi_data_V_3_phi_fu_268_p4 = axi_data_V_3_reg_265;
    end
end

always @ (*) begin
    if (((icmp_ln132_reg_408 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_axi_last_V_3_phi_fu_279_p4 = axi_last_V_8_reg_286;
    end else begin
        ap_phi_mux_axi_last_V_3_phi_fu_279_p4 = axi_last_V_3_reg_276;
    end
end

always @ (*) begin
    if (((icmp_ln132_reg_408 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_last_phi_fu_246_p4 = axi_last_V_8_reg_286;
    end else begin
        ap_phi_mux_last_phi_fu_246_p4 = last_reg_242;
    end
end

always @ (*) begin
    if (((icmp_ln132_reg_408 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_start_3_phi_fu_257_p4 = 1'd0;
    end else begin
        ap_phi_mux_start_3_phi_fu_257_p4 = start_3_reg_254;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        highthreshold_blk_n = highthreshold_ap_vld;
    end else begin
        highthreshold_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        highthreshold_out_blk_n = highthreshold_out_full_n;
    end else begin
        highthreshold_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((highthreshold_out_full_n == 1'b0) | (lowthreshold_out_full_n == 1'b0) | (highthreshold_ap_vld == 1'b0) | (lowthreshold_ap_vld == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        highthreshold_out_write = 1'b1;
    end else begin
        highthreshold_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_360_p2 == 1'd1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        lowthreshold_blk_n = lowthreshold_ap_vld;
    end else begin
        lowthreshold_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        lowthreshold_out_blk_n = lowthreshold_out_full_n;
    end else begin
        lowthreshold_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((highthreshold_out_full_n == 1'b0) | (lowthreshold_out_full_n == 1'b0) | (highthreshold_ap_vld == 1'b0) | (lowthreshold_ap_vld == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        lowthreshold_out_write = 1'b1;
    end else begin
        lowthreshold_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((icmp_ln132_reg_408 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        rgb_img_src_4206_blk_n = rgb_img_src_4206_full_n;
    end else begin
        rgb_img_src_4206_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln132_reg_408 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        rgb_img_src_4206_write = 1'b1;
    end else begin
        rgb_img_src_4206_write = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (or_ln138_fu_378_p2 == 1'd0) & (icmp_ln132_fu_372_p2 == 1'd0)) | ((start_reg_171 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_state8) & (axi_last_V_9_reg_312 == 1'd0)))) begin
        src_TDATA_blk_n = src_TVALID_int_regslice;
    end else begin
        src_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_predicate_op122_read_state5 == 1'b1)) | (~((src_TVALID_int_regslice == 1'b0) & (axi_last_V_9_reg_312 == 1'd0)) & (1'b1 == ap_CS_fsm_state8) & (axi_last_V_9_reg_312 == 1'd0)) | (~((start_reg_171 == 1'd0) & (src_TVALID_int_regslice == 1'b0)) & (start_reg_171 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        src_TREADY_int_regslice = 1'b1;
    end else begin
        src_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((highthreshold_out_full_n == 1'b0) | (lowthreshold_out_full_n == 1'b0) | (highthreshold_ap_vld == 1'b0) | (lowthreshold_ap_vld == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((start_reg_171 == 1'd0) & (src_TVALID_int_regslice == 1'b0)) & (start_reg_171 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((start_reg_171 == 1'd0) & (src_TVALID_int_regslice == 1'b0)) & (ap_phi_mux_start_phi_fu_175_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_360_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln132_fu_372_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln132_fu_372_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if ((~((src_TVALID_int_regslice == 1'b0) & (axi_last_V_9_reg_312 == 1'd0)) & (1'b1 == ap_CS_fsm_state8) & (axi_last_V_9_reg_312 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else if ((~((src_TVALID_int_regslice == 1'b0) & (axi_last_V_9_reg_312 == 1'd0)) & (1'b1 == ap_CS_fsm_state8) & (ap_phi_mux_axi_last_V_9_phi_fu_315_p4 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = (((ap_enable_reg_pp1_iter0 == 1'b1) & (src_TVALID_int_regslice == 1'b0) & (ap_predicate_op122_read_state5 == 1'b1)) | ((icmp_ln132_reg_408 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (rgb_img_src_4206_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((ap_enable_reg_pp1_iter0 == 1'b1) & (src_TVALID_int_regslice == 1'b0) & (ap_predicate_op122_read_state5 == 1'b1)) | ((icmp_ln132_reg_408 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (rgb_img_src_4206_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((ap_enable_reg_pp1_iter0 == 1'b1) & (src_TVALID_int_regslice == 1'b0) & (ap_predicate_op122_read_state5 == 1'b1)) | ((icmp_ln132_reg_408 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (rgb_img_src_4206_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((highthreshold_out_full_n == 1'b0) | (lowthreshold_out_full_n == 1'b0) | (highthreshold_ap_vld == 1'b0) | (lowthreshold_ap_vld == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state2 = ((start_reg_171 == 1'd0) & (src_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp1_stage0_iter0 = ((src_TVALID_int_regslice == 1'b0) & (ap_predicate_op122_read_state5 == 1'b1));
end

always @ (*) begin
    ap_block_state6_pp1_stage0_iter1 = ((icmp_ln132_reg_408 == 1'd0) & (rgb_img_src_4206_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state8 = ((src_TVALID_int_regslice == 1'b0) & (axi_last_V_9_reg_312 == 1'd0));
end

always @ (*) begin
    ap_condition_180 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0));
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_phi_mux_axi_last_V_9_phi_fu_315_p4 = axi_last_V_9_reg_312;

assign ap_phi_mux_start_phi_fu_175_p4 = start_reg_171;

assign ap_phi_reg_pp1_iter0_axi_last_V_8_reg_286 = 'bx;

assign ap_phi_reg_pp1_iter0_p_Val2_s_reg_299 = 'bx;

always @ (*) begin
    ap_predicate_op122_read_state5 = ((or_ln138_fu_378_p2 == 1'd0) & (icmp_ln132_fu_372_p2 == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign highthreshold_out_din = highthreshold;

assign i_3_fu_354_p2 = (i_reg_182 + 11'd1);

assign icmp_ln128_fu_360_p2 = ((i_reg_182 == 11'd1080) ? 1'b1 : 1'b0);

assign icmp_ln132_fu_372_p2 = ((j_reg_231 == 11'd1920) ? 1'b1 : 1'b0);

assign j_3_fu_366_p2 = (j_reg_231 + 11'd1);

assign lowthreshold_out_din = lowthreshold;

assign or_ln138_fu_378_p2 = (ap_phi_mux_start_3_phi_fu_257_p4 | ap_phi_mux_last_phi_fu_246_p4);

assign rgb_img_src_4206_din = p_Val2_s_reg_299;

assign src_TREADY = regslice_both_AXI_video_strm_V_data_V_U_ack_in;

assign start_out = real_start;

endmodule //edge_canny_detector_AXIvideo2xfMat_24_9_1080_1920_1_16
