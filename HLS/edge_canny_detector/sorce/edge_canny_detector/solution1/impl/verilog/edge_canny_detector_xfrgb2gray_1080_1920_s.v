// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module edge_canny_detector_xfrgb2gray_1080_1920_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        rgb_img_src_4206_dout,
        rgb_img_src_4206_empty_n,
        rgb_img_src_4206_read,
        gray_img_src_4207_din,
        gray_img_src_4207_full_n,
        gray_img_src_4207_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state9 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [23:0] rgb_img_src_4206_dout;
input   rgb_img_src_4206_empty_n;
output   rgb_img_src_4206_read;
output  [7:0] gray_img_src_4207_din;
input   gray_img_src_4207_full_n;
output   gray_img_src_4207_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg rgb_img_src_4206_read;
reg gray_img_src_4207_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    rgb_img_src_4206_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln23_reg_156;
reg    gray_img_src_4207_blk_n;
reg    ap_enable_reg_pp0_iter6;
reg   [0:0] icmp_ln23_reg_156_pp0_iter5_reg;
reg   [20:0] indvar_flatten_reg_63;
wire   [20:0] add_ln23_fu_80_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
reg    ap_block_state8_pp0_stage0_iter6;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln23_fu_86_p2;
reg   [0:0] icmp_ln23_reg_156_pp0_iter1_reg;
reg   [0:0] icmp_ln23_reg_156_pp0_iter2_reg;
reg   [0:0] icmp_ln23_reg_156_pp0_iter3_reg;
reg   [0:0] icmp_ln23_reg_156_pp0_iter4_reg;
reg   [7:0] rgb_V_1_reg_160;
reg   [7:0] rgb_V_1_reg_160_pp0_iter2_reg;
reg   [7:0] rgb_V_2_reg_165;
wire   [21:0] grp_fu_127_p2;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
wire    call_ret_ExtractPixel_fu_74_ap_ready;
wire   [7:0] call_ret_ExtractPixel_fu_74_ap_return_0;
wire   [7:0] call_ret_ExtractPixel_fu_74_ap_return_1;
wire   [7:0] call_ret_ExtractPixel_fu_74_ap_return_2;
reg    ap_block_pp0_stage0_01001;
wire   [21:0] grp_fu_133_p3;
wire   [22:0] grp_fu_142_p3;
wire   [7:0] grp_fu_127_p0;
wire   [14:0] grp_fu_127_p1;
wire   [7:0] grp_fu_133_p0;
wire   [12:0] grp_fu_133_p1;
wire   [7:0] grp_fu_142_p0;
wire   [15:0] grp_fu_142_p1;
wire   [21:0] grp_fu_142_p2;
reg    grp_fu_127_ce;
reg    grp_fu_133_ce;
reg    grp_fu_142_ce;
wire    ap_CS_fsm_state9;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [21:0] grp_fu_127_p00;
wire   [19:0] grp_fu_133_p00;
wire   [22:0] grp_fu_142_p00;
wire   [22:0] grp_fu_142_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
end

edge_canny_detector_ExtractPixel call_ret_ExtractPixel_fu_74(
    .ap_ready(call_ret_ExtractPixel_fu_74_ap_ready),
    .src_V_read(rgb_img_src_4206_dout),
    .ap_return_0(call_ret_ExtractPixel_fu_74_ap_return_0),
    .ap_return_1(call_ret_ExtractPixel_fu_74_ap_return_1),
    .ap_return_2(call_ret_ExtractPixel_fu_74_ap_return_2)
);

edge_canny_detector_mul_mul_8ns_15ns_22_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 22 ))
mul_mul_8ns_15ns_22_4_1_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_127_p0),
    .din1(grp_fu_127_p1),
    .ce(grp_fu_127_ce),
    .dout(grp_fu_127_p2)
);

edge_canny_detector_mac_muladd_8ns_13ns_22ns_22_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 13 ),
    .din2_WIDTH( 22 ),
    .dout_WIDTH( 22 ))
mac_muladd_8ns_13ns_22ns_22_4_1_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_133_p0),
    .din1(grp_fu_133_p1),
    .din2(grp_fu_127_p2),
    .ce(grp_fu_133_ce),
    .dout(grp_fu_133_p3)
);

edge_canny_detector_mac_muladd_8ns_16ns_22ns_23_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 22 ),
    .dout_WIDTH( 23 ))
mac_muladd_8ns_16ns_22ns_23_4_1_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_142_p0),
    .din1(grp_fu_142_p1),
    .din2(grp_fu_142_p2),
    .ce(grp_fu_142_ce),
    .dout(grp_fu_142_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_86_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_63 <= add_ln23_fu_80_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_63 <= 21'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln23_reg_156 <= icmp_ln23_fu_86_p2;
        icmp_ln23_reg_156_pp0_iter1_reg <= icmp_ln23_reg_156;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln23_reg_156_pp0_iter2_reg <= icmp_ln23_reg_156_pp0_iter1_reg;
        icmp_ln23_reg_156_pp0_iter3_reg <= icmp_ln23_reg_156_pp0_iter2_reg;
        icmp_ln23_reg_156_pp0_iter4_reg <= icmp_ln23_reg_156_pp0_iter3_reg;
        icmp_ln23_reg_156_pp0_iter5_reg <= icmp_ln23_reg_156_pp0_iter4_reg;
        rgb_V_1_reg_160_pp0_iter2_reg <= rgb_V_1_reg_160;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_156 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rgb_V_1_reg_160 <= call_ret_ExtractPixel_fu_74_ap_return_1;
        rgb_V_2_reg_165 <= call_ret_ExtractPixel_fu_74_ap_return_2;
    end
end

always @ (*) begin
    if ((icmp_ln23_fu_86_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln23_reg_156_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gray_img_src_4207_blk_n = gray_img_src_4207_full_n;
    end else begin
        gray_img_src_4207_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln23_reg_156_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gray_img_src_4207_write = 1'b1;
    end else begin
        gray_img_src_4207_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_127_ce = 1'b1;
    end else begin
        grp_fu_127_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_133_ce = 1'b1;
    end else begin
        grp_fu_133_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_142_ce = 1'b1;
    end else begin
        grp_fu_142_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((icmp_ln23_reg_156 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rgb_img_src_4206_blk_n = rgb_img_src_4206_empty_n;
    end else begin
        rgb_img_src_4206_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln23_reg_156 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rgb_img_src_4206_read = 1'b1;
    end else begin
        rgb_img_src_4206_read = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln23_fu_86_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b0)) | ((icmp_ln23_fu_86_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln23_fu_80_p2 = (indvar_flatten_reg_63 + 21'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln23_reg_156_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (gray_img_src_4207_full_n == 1'b0)) | ((icmp_ln23_reg_156 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (rgb_img_src_4206_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln23_reg_156_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (gray_img_src_4207_full_n == 1'b0)) | ((icmp_ln23_reg_156 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (rgb_img_src_4206_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln23_reg_156_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (gray_img_src_4207_full_n == 1'b0)) | ((icmp_ln23_reg_156 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (rgb_img_src_4206_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln23_reg_156 == 1'd0) & (rgb_img_src_4206_empty_n == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_pp0_stage0_iter6 = ((icmp_ln23_reg_156_pp0_iter5_reg == 1'd0) & (gray_img_src_4207_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign gray_img_src_4207_din = {{grp_fu_142_p3[22:15]}};

assign grp_fu_127_p0 = grp_fu_127_p00;

assign grp_fu_127_p00 = call_ret_ExtractPixel_fu_74_ap_return_0;

assign grp_fu_127_p1 = 22'd9798;

assign grp_fu_133_p0 = grp_fu_133_p00;

assign grp_fu_133_p00 = rgb_V_2_reg_165;

assign grp_fu_133_p1 = 20'd3736;

assign grp_fu_142_p0 = grp_fu_142_p00;

assign grp_fu_142_p00 = rgb_V_1_reg_160_pp0_iter2_reg;

assign grp_fu_142_p1 = 23'd19235;

assign grp_fu_142_p2 = grp_fu_142_p20;

assign grp_fu_142_p20 = grp_fu_133_p3;

assign icmp_ln23_fu_86_p2 = ((indvar_flatten_reg_63 == 21'd2073600) ? 1'b1 : 1'b0);

assign start_out = real_start;

endmodule //edge_canny_detector_xfrgb2gray_1080_1920_s
